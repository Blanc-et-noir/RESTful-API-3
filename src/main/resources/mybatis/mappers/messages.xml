<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.api.mapper.MessageMapper">
	<select id="readMessageTypeByMessageTypeId" resultType="HashMap" parameterType="Integer">
		SELECT *
		FROM message_types
		WHERE message_type_id = #{message_type_id}
	</select>

	<select id="readNewMessageId" resultType="Integer" parameterType="HashMap">
		SELECT NEXTVAL(seq_message_id)
	</select>
	
	<select id="readMessages" resultType="MessageEntity" parameterType="HashMap">
		SELECT *
		FROM messages m
		NATURAL JOIN message_types 
		NATURAL JOIN (
			SELECT m.message_id, u.user_id ${owner_user_id}, u.user_name ${owner_user_name}
			FROM ${message_box} m JOIN users u ON m.${owner_user_id} = u.user_id
			WHERE m.${owner_user_id} = #{user_id} AND m.${owner_message_status} = 'N'
		) r1
		NATURAL JOIN (
			SELECT m.message_id, 
			CASE WHEN u.user_status = 'Y' THEN NULL ELSE u.user_id END ${other_user_id},
			CASE WHEN u.user_status = 'Y' THEN '탈퇴한 사용자' ELSE u.user_name END ${other_user_name}
			FROM ${other_message_box} m JOIN users u ON m.${other_user_id} = u.user_id
		) r2
		WHERE ${flag} LIKE CONCAT('%',#{search},'%') AND NOT EXISTS(
			SELECT 1
			FROM blockings b
			WHERE b.source_user_id = #{user_id} AND b.target_user_id = r2.${other_user_id}
		)
		ORDER BY message_id ${order}
		OFFSET ${offset} ROWS FETCH NEXT ${limit} ROWS ONLY
	</select>
	
	<select id="readMessageByMessageIdAndUserId" resultType="MessageEntity" parameterType="HashMap">
		SELECT *
		FROM messages NATURAL JOIN message_types NATURAL JOIN message_senders NATURAL JOIN message_receivers
		WHERE message_id = ${message_id} AND (message_sender_status='N' AND message_sender_user_id = #{user_id} OR message_receiver_status='N' AND message_receiver_user_id = #{user_id})
	</select>

	<select id="readUserMessageTime" resultType="java.sql.Timestamp" parameterType="HashMap">
		SELECT user_message_time
		FROM user_times
		WHERE user_id = #{message_sender_user_id}
	</select>

	<insert id="createMessage" parameterType="HashMap">
		INSERT INTO messages VALUES(${message_id},${message_type_id},#{message_title},#{message_content}, NOW())
	</insert>
	
	<insert id="createMessageSender" parameterType="HashMap">
		INSERT INTO message_senders(message_id, message_sender_user_id) VALUES(${message_id},#{message_sender_user_id})
	</insert>
	
	<insert id="createMessageReceiver" parameterType="HashMap">
		INSERT INTO message_receivers(message_id, message_receiver_user_id) VALUES(${message_id},#{message_receiver_user_id})
	</insert>
	
	<update id="deleteMessageBySenderId" parameterType="HashMap">
		UPDATE message_senders
		SET message_sender_status = 'Y', message_sender_delete_time = NOW()
		WHERE message_id = ${message_id} AND message_sender_user_id = #{user_id} AND message_sender_status = 'N'
	</update>
	
	<update id="deleteMessageByReceiverId" parameterType="HashMap">
		UPDATE message_receivers
		SET message_receiver_status = 'Y', message_receiver_delete_time = NOW()
		WHERE message_id = ${message_id} AND message_receiver_user_id = #{user_id} AND message_receiver_status = 'N'
	</update>
	
	<update id="updateUserMessageTime" parameterType="HashMap">
		UPDATE user_times
		SET user_message_time = NOW()
		WHERE user_id = #{message_sender_user_id}
	</update>
</mapper>