<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.api.mapper.MessageMapper">
	<select id="readMessageTypeByMessageTypeId" resultType="HashMap" parameterType="Integer">
		SELECT *
		FROM message_types
		WHERE message_type_id = #{message_type_id}
	</select>

	<select id="readNewMessageId" resultType="Integer" parameterType="HashMap">
		SELECT NEXTVAL(seq_message_id)
	</select>
	
	<select id="readMessages" resultType="MessageEntity" parameterType="HashMap">
		SELECT 
			m.message_id,
			m.message_type_id,
			m.message_title,
			m.message_content, m.message_time, message_type_content,	
			r1.${owner_user_id},
			CASE WHEN r2.user_status = 'Y' OR r2.${other_user_id} IS NULL THEN '탈퇴한 사용자' ELSE r2.${other_user_id} END ${other_user_id},
			r1.${owner_message_delete_time},
			r2.${other_message_delete_time}
		FROM messages m
		NATURAL JOIN message_types
		LEFT OUTER JOIN (
			SELECT m.message_id, u.user_id ${owner_user_id}, u.user_status, m.${owner_message_delete_time}, m.${owner_message_status}
			FROM ${message_box} m JOIN users u ON m.${owner_user_id} = u.user_id
		) r1 USING(message_id)
		LEFT OUTER JOIN (
			SELECT m.message_id, u.user_id ${other_user_id}, u.user_status, m.${other_message_delete_time}
			FROM ${other_message_box} m JOIN users u ON m.${other_user_id} = u.user_id
		) r2 USING(message_id)
		WHERE
			${flag} LIKE CONCAT('%',#{search},'%')
			AND
			NOT EXISTS(
				SELECT 1
				FROM blockings b
				WHERE b.source_user_id = #{user_id} AND b.target_user_id = r2.${other_user_id}
			)
			AND
			${owner_user_id} = #{user_id} AND r1.${owner_message_status} = 'N'
		ORDER BY message_id ${order}
		OFFSET ${offset} ROWS FETCH NEXT ${limit} ROWS ONLY
	</select>
	
	<select id="readMessageByMessageIdAndUserId" resultType="MessageEntity" parameterType="HashMap">
		SELECT
			message_id, 
			message_type_id,
			message_title,
			message_content,
			message_type_content,
			CASE WHEN r1.user_id IS NULL OR r1.user_status = 'Y' THEN '탈퇴한 사용자' ELSE r1.user_id END message_sender_user_id,
			CASE WHEN r2.user_id IS NULL OR r2.user_status = 'Y' THEN '탈퇴한 사용자' ELSE r2.user_id END message_receiver_user_id,
			r1.message_sender_status,
			r2.message_receiver_status,
			r1.message_sender_delete_time,
			r2.message_receiver_delete_time,
			message_time
		FROM messages
			NATURAL JOIN message_types
			LEFT OUTER JOIN (SELECT * FROM message_senders m JOIN users u ON(m.message_sender_user_id = u.user_id)) r1 USING(message_id)
			LEFT OUTER JOIN (SELECT * FROM message_receivers m JOIN users u ON(m.message_receiver_user_id = u.user_id)) r2 USING(message_id)
		WHERE message_id = ${message_id} AND (message_sender_status='N' AND message_sender_user_id = #{user_id} OR message_receiver_status='N' AND message_receiver_user_id = #{user_id})
	</select>

	<select id="readUserMessageTime" resultType="java.sql.Timestamp" parameterType="HashMap">
		SELECT user_message_time
		FROM user_times
		WHERE user_id = #{message_sender_user_id}
	</select>

	<insert id="createMessage" parameterType="HashMap">
		INSERT INTO messages VALUES(${message_id},${message_type_id},#{message_title},#{message_content}, NOW())
	</insert>
	
	<insert id="createMessageSender" parameterType="HashMap">
		INSERT INTO message_senders(message_id, message_sender_user_id) VALUES(${message_id},#{message_sender_user_id})
	</insert>
	
	<insert id="createMessageReceiver" parameterType="HashMap">
		INSERT INTO message_receivers(message_id, message_receiver_user_id) VALUES(${message_id},#{message_receiver_user_id})
	</insert>
	
	<update id="deleteMessageBySenderId" parameterType="HashMap">
		UPDATE message_senders
		SET message_sender_status = 'Y', message_sender_delete_time = NOW()
		WHERE message_id = ${message_id} AND message_sender_user_id = #{user_id} AND message_sender_status = 'N'
	</update>
	
	<update id="deleteMessageByReceiverId" parameterType="HashMap">
		UPDATE message_receivers
		SET message_receiver_status = 'Y', message_receiver_delete_time = NOW()
		WHERE message_id = ${message_id} AND message_receiver_user_id = #{user_id} AND message_receiver_status = 'N'
	</update>
	
	<update id="updateUserMessageTime" parameterType="HashMap">
		UPDATE user_times
		SET user_message_time = NOW()
		WHERE user_id = #{message_sender_user_id}
	</update>
</mapper>