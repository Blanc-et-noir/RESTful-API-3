<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.api.mapper.ItemMapper">
	<resultMap type="com.spring.api.dto.ItemWithItemImagesDTO" id="ItemWithItemImagesDTOMap">
		<id column="item_id" property="item_id"/>
		<result column="item_name" property="item_name"/>
		<result column="item_description" property="item_description"/>
		<result column="item_price" property="item_price"/>
		<result column="item_number" property="item_number"/>
		<result column="item_status" property="item_status"/>
		<result column="item_time" property="item_time"/>
		<result column="user_id" property="user_id"/>
		<collection property="item_images" javaType="java.util.LinkedList" ofType="com.spring.api.dto.ItemImageDTO">
			<id column="item_image_id" property="item_image_id"/>
			<!-- <result column="item_id" property="item_id"/> -->
			<result column="item_image_original_name" property="item_image_original_name"/>
			<result column="item_image_stored_name" property="item_image_stored_name"/>
			<result column="item_image_extension" property="item_image_extension"/>
			<result column="item_image_size" property="item_image_size"/>
		</collection>
		<collection property="hashtags" javaType="java.util.LinkedList" ofType="com.spring.api.dto.HashtagDTO">
			<id column="hashtag_id" property="hashtag_id"/>
			<!--<result column="item_id" property="item_id"/> -->
			<result column="hashtag_content" property="hashtag_content"/>
		</collection>
	</resultMap>

	<select id="readNewItemId" resultType="Integer">
		SELECT NEXTVAL(seq_item_id)
	</select>
	
	<select id="readItemByItemId" resultMap="ItemWithItemImagesDTOMap" parameterType="HashMap">
		SELECT *
		FROM items i
			NATURAL JOIN users u
			LEFT OUTER JOIN hashtags h USING(item_id)
			LEFT OUTER JOIN item_images m ON(i.item_id = m.item_id AND m.item_image_status ='N')
		WHERE i.item_id = ${item_id} AND i.item_status != 'Y' AND u.user_status = 'N'
	</select>
	
	<select id="readCommentByCommentId" resultType="CommentEntity" parameterType="HashMap">
		SELECT *
		FROM comments NATURAL JOIN users
		WHERE item_id = ${item_id} AND comment_id = ${comment_id} AND comment_status = 'N' AND user_status = 'N'
	</select>
	
	<select id="readItemImageByItemImageId" resultType="ItemImageEntity" parameterType="HashMap">
		SELECT *
		FROM item_images
		WHERE item_image_id = ${item_image_id} AND item_id = ${item_id};
	</select>
	
	<select id="readItems" resultType="ItemWithItemThumbnailImageDTO" parameterType="HashMap">
		SELECT *, item_image_id "item_thumbnail_image_id"
		FROM items i
		NATURAL JOIN users u
		LEFT OUTER JOIN (
			SELECT *
			FROM(
				SELECT *, ROW_NUMBER() OVER(PARTITION BY item_id ORDER BY item_image_id ASC) lvl
				FROM item_images
				WHERE item_image_status = 'N'
			) t
			WHERE t.lvl = 1
		) m USING(item_id)
		WHERE i.item_status != 'Y' AND u.user_status = 'N' <if test="flag != null">AND REPLACE(${flag},' ','') LIKE CONCAT('%',#{search},'%')</if>
		<if test="hashtag_contents != null">
			AND EXISTS(
				SELECT 1
				FROM hashtags h
				WHERE i.item_id = h.item_id AND REPLACE(h.hashtag_content,' ', '') IN <foreach collection="hashtag_contents" open="(" close=")" item="value" separator=",">REPLACE(#{value},' ', '')</foreach>
			)
		</if>
		ORDER BY i.item_id DESC
		LIMIT ${limit} OFFSET ${offset}
	</select>
	
	<select id="readComments" resultType="CommentEntity" parameterType="HashMap">
		WITH RECURSIVE cte AS(
			SELECT comment_id, parent_comment_id, comment_id "top_comment_id", comment_content, 1 "comment_depth", CAST(LPAD(comment_id,10,0) AS CHAR(300)) "comment_path",comment_time,comment_status, item_id, user_id
			FROM comments
			WHERE item_id = ${item_id} AND parent_comment_id IS NULL
			UNION ALL
			SELECT c1.comment_id, c1.parent_comment_id, c2.top_comment_id, c1.comment_content, c2.comment_depth+1 "comment_depth", CONCAT(c2.comment_path, LPAD(c1.comment_id,10,0)) "comment_path",c1.comment_time,c1.comment_status, c1.item_id, c1.user_id
			FROM comments c1 JOIN cte c2 ON c1.parent_comment_id = c2.comment_id
		)
		SELECT comment_id, parent_comment_id, comment_time, comment_depth, item_id,
			CASE WHEN user_id IS NULL OR u.user_status = 'Y' THEN '탈퇴한 사용자' ELSE user_id END "user_id",
			CASE WHEN comment_status = 'Y' THEN '작성자에 의해 삭제된 댓글입니다.' WHEN b.target_user_id IS NOT NULL THEN '블락된 사용자가 작성한 댓글입니다.' ELSE comment_content END "comment_content"
		FROM cte LEFT OUTER JOIN users u USING(user_id) LEFT OUTER JOIN blockings b ON(u.user_id = b.target_user_id)
		ORDER BY top_comment_id DESC, comment_path ASC
		LIMIT ${limit} OFFSET ${offset}
	</select>
	
	<select id="readUserItemTime" resultType="java.sql.Timestamp" parameterType="HashMap">
		SELECT user_item_time
		FROM user_times
		WHERE user_id = #{user_id}
	</select>
	
	<insert id="createItem" parameterType="HashMap">
		INSERT INTO items
		VALUES(${item_id},#{item_name},#{item_description},${item_price},${item_number},'N',NOW(),NULL,#{user_id})
	</insert>
	
	<insert id="createHashtags" parameterType="HashMap">
		INSERT INTO hashtags(hashtag_content, item_id) VALUES
		<foreach collection="hashtag_contents" separator="," item="value">
			(#{value}, ${item_id})
		</foreach>
	</insert>
	
	<insert id="createItemImages" parameterType="HashMap">
		INSERT INTO item_images VALUES
		<foreach collection="image_files" separator="," item="image">
			(NEXTVAL(seq_item_image_id),#{image.item_image_original_name},#{image.item_image_stored_name},#{image.item_image_extension},${image.item_image_size},'N',${item_id})
		</foreach>
	</insert>
	
	<insert id="createCommentContent" parameterType="HashMap">
		INSERT INTO comments
		VALUES(NEXTVAL(seq_comment_id),NULL,#{comment_content},NOW(),'N',${item_id},#{user_id})
	</insert>
	
	<insert id="createReplyCommentContent" parameterType="HashMap">
		INSERT INTO comments
		VALUES(NEXTVAL(seq_comment_id),${comment_id},#{comment_content},NOW(),'N',${item_id},#{user_id})
	</insert>
	
	<update id="deleteComment" parameterType="HashMap">
		UPDATE comments
		SET comment_status = 'Y'
		WHERE comment_id = ${comment_id} AND user_id = #{user_id} AND comment_status = 'N'
	</update>
	
	<update id="updateComment" parameterType="HashMap">
		UPDATE comments
		SET comment_content = #{comment_content}
		WHERE comment_id = ${comment_id} AND comment_status = 'N' AND user_id = #{user_id} AND item_id = ${item_id}
	</update>
	
	<update id="deleteItem" parameterType="HashMap">
		UPDATE items
		SET item_status = 'Y', item_delete_time = NOW()
		WHERE item_id = ${item_id} AND user_id = #{user_id} AND item_status != 'Y'
	</update>
	
	<update id="updateUserItemTime" parameterType="HashMap">
		UPDATE user_times
		SET user_item_time = NOW()
		WHERE user_id = #{user_id}
	</update>
	
	<update id="sellItem" parameterType="HashMap">
		UPDATE items
		SET item_status = 'S'
		WHERE item_id = ${item_id} AND item_status = 'N'
	</update>
	
	<update id="deleteItemImages" parameterType="HashMap">
		UPDATE item_images
		SET item_image_status = 'Y'
		WHERE item_id = ${item_id} AND item_image_id IN(
			<foreach collection="item_image_ids" item="value" separator=",">
				${value}
			</foreach>
		)
	</update>
	
	<update id="updateItem" parameterType="HashMap">
		UPDATE items
		<set>
			<if test="item_name != null">item_name = #{item_name},</if>
			<if test="item_description != null">item_description = #{item_description},</if>
			<if test="item_price != null">item_price = ${item_price},</if>
			<if test="item_number != null">item_number = ${item_number},</if>
		</set>
		WHERE user_id = #{user_id} AND item_id = ${item_id} AND item_status = 'N'
	</update>
	
	<delete id="deleteHashtags" parameterType="HashMap">
		DELETE FROM hashtags
		WHERE item_id = ${item_id} AND hashtag_id IN(<foreach collection="hashtag_ids" item="value" separator=",">${value}</foreach>)
	</delete>
</mapper>