<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.api.mapper.UserMapper">
	<select id="readUserInfoByNotWithdrawedUserId" resultType="UserEntity" parameterType="String">
		SELECT *
		FROM users NATURAL JOIN questions
		WHERE user_id = #{user_id} AND user_status = 'N'
	</select>

	<select id="readUserInfoByUserId" resultType="UserEntity" parameterType="String">
		SELECT *
		FROM users NATURAL JOIN questions
		WHERE user_id = #{user_id}
	</select>
	
	<select id="readUserInfoByUserPhone" resultType="UserEntity" parameterType="String">
		SELECT *
		FROM users NATURAL JOIN questions
		WHERE user_phone = #{user_phone}
	</select>
	
	<select id="readQuestionByQuestionId" resultType="QuestionEntity" parameterType="Integer">
		SELECT *
		FROM questions
		WHERE question_id = ${question_id}
	</select>
	
	<select id="readFollowingInfoByBothUserId" resultType="FollowingEntity" parameterType="HashMap">
		SELECT *
		FROM followings
		WHERE source_user_id = #{source_user_id} AND target_user_id = #{target_user_id}
	</select>
	
	<select id="readBlockingInfoByBothUserId" resultType="BlockingEntity" parameterType="HashMap">
		SELECT *
		FROM blockings
		WHERE source_user_id = #{source_user_id} AND target_user_id = #{target_user_id}
	</select>
	
	<select id="readFollowingInfoBySourceUserId" resultType="FollowingEntity" parameterType="String">
		SELECT *
		FROM followings
		WHERE source_user_id = #{source_user_id}
	</select>
	
	<select id="readBlockingInfoBySourceUserId" resultType="BlockingEntity" parameterType="String">
		SELECT *
		FROM blockings
		WHERE source_user_id = #{source_user_id}
	</select>
	
	<select id="readQuestionByUserId" resultType="QuestionEntity" parameterType="HashMap">
		SELECT *
		FROM users NATURAL JOIN questions
		WHERE user_id = #{user_id}
	</select>
	
	<select id="readQuestions" resultType="QuestionEntity">
		SELECT *
		FROM questions
	</select>
	
	<insert id="createUser" parameterType="HashMap">
		INSERT INTO users(
			user_id,
			user_pw,
			user_name,
			user_phone,
			user_salt,
			user_gender,
			question_id,
			question_answer
		)
		VALUES(#{user_id},#{user_pw},#{user_name},#{user_phone},#{user_salt},UPPER(#{user_gender}),#{question_id},#{question_answer})
	</insert>
	
	<insert id="createUserTime" parameterType="HashMap">
		INSERT INTO user_times(user_id, user_register_time, user_pw_change_time)
		VALUES(#{user_id},NOW(),NOW())
	</insert>
	
	<insert id="createFollowingInfo">
		INSERT INTO followings(source_user_id,target_user_id) VALUES(#{source_user_id},#{target_user_id})
	</insert>
	
	<insert id="createBlockingInfo">
		INSERT INTO blockings(source_user_id,target_user_id) VALUES(#{source_user_id},#{target_user_id})
	</insert>
	
	<update id="updateMyUserInfo" parameterType="HashMap">
		UPDATE users
		<set>
			<if test="new_user_name != null">user_name = #{new_user_name},</if>
			<if test="new_user_phone != null">user_phone = #{new_user_phone},</if>
			<if test="new_user_pw != null and new_question_id != null and new_question_answer != null and new_user_salt != null">
				user_pw = #{new_user_pw},
				question_id = #{new_question_id},
				question_answer = #{new_question_answer},
				user_salt = #{new_user_salt},
			</if>			
			<if test="new_user_gender != null">user_gender = #{new_user_gender},</if>
		</set>
		WHERE user_id = #{user_id} AND user_status = 'N'
	</update>
	
	<update id="updateUserPwChangeTime" parameterType="HashMap">
		UPDATE user_times
		SET user_pw_change_time = NOW()
		WHERE user_id = #{user_id}
	</update>
	
	<update id="updateUserLoginTime" parameterType="HashMap">
		UPDATE user_times
		SET user_login_time = NOW()
		WHERE user_id = #{user_id}
	</update>
	
	<update id="updateUserLogoutTime" parameterType="String">
		UPDATE user_times
		SET user_logout_time = NOW()
		WHERE user_id = #{user_id}
	</update>
	
	<update id="updateUserTokensToNull" parameterType="HashMap">
		UPDATE users
		SET user_accesstoken = NULL, user_refreshtoken = NULL
		WHERE user_id = #{user_id} AND user_status = 'N'
	</update>
	
	<update id="updateUserTokensToNewTokens" parameterType="HashMap">
		UPDATE users
		SET user_accesstoken = #{user_accesstoken}, user_refreshtoken = #{user_refreshtoken}
		WHERE user_id = #{user_id} AND user_status = 'N'
	</update>
	
	<update id="deleteUser" parameterType="HashMap">
		UPDATE users
		SET user_status = 'Y', user_accesstoken = NULL, user_refreshtoken = NULL
		WHERE user_id = #{user_id} AND user_status = 'N'
	</update>
	
	<delete id="deleteFollowingInfoByBothUserId" parameterType="HashMap">
		DELETE FROM followings
		WHERE source_user_id = #{source_user_id} AND target_user_id = #{target_user_id}
	</delete>
	
	<delete id="deleteBlockingInfoByBothUserId" parameterType="HashMap">
		DELETE FROM blockings
		WHERE source_user_id = #{source_user_id} AND target_user_id = #{target_user_id}
	</delete>
	
	<update id="updateUserPw" parameterType="HashMap">
		UPDATE users
		SET
			user_pw = #{new_user_pw},
			question_id = ${new_question_id},
			question_answer = #{new_question_answer},
			user_salt = #{new_user_salt}
		WHERE user_id = #{user_id} AND user_status = 'N'
	</update>
</mapper>